<%= form_with(model: post, local: true) do |form| %>

  <% if !@post.persisted? %>
    <%= form.hidden_field :user_id, value: current_user.id %>
    <%= form.hidden_field :post_id, value: @post_id %>
    <%= form.hidden_field :posted_to_id, value: @posted_to&.id %>
  <% end %>
  <div class="form-group">
    <%= form.text_field :title, autofocus: true, class: 'form-control', placeholder: "Title" %>
  </div>
  <% if !@post.persisted? && @type == Post::POST_TYPE_LAYER %>
    <%= form.hidden_field :post_type, value: Post::POST_TYPE_LAYER %>
  <% elsif !@post.persisted? && (@type == Post::POST_TYPE_SOCIAL_MEDIA || @type == Post::POST_TYPE_HAVE || @type == Post::POST_TYPE_WANT) %>
    <%= form.hidden_field :post_type, value: @type %>
  <% elsif !@post.persisted? %>
    <div class="form-group">
      <div class="row">
        <div class="col-2 pt-2">This problem is about: </div>
        <div class="col-6">
          <%= form.select :post_type, Post::CORE_POST_TYPES.map { |r| [r.titleize, r] } , {include_blank: false},  { class: "form-control"} %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <div class="row">
        <div class="col-2 pt-2">For a 'Subject' post: </div>
        <div class="col-6">
          <%= form.select :subject_id, Post.where(post_type: Post::POST_TYPE_SUBJECT).map { |r| [r.title, r.id] } , {include_blank: "Select Subject"}, {  class: 'form-control', required: true } %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <div class="row">
        <div class="col-2 pt-2">For a 'Problem' post: </div>
        <div class="col-6">
          <%= form.select :problem_id, Post.where(post_type: Post::POST_TYPE_PROBLEM).map { |r| [r.title, r.id] } , {include_blank: "Select Subject"}, {  class: 'form-control hide', required: true } %>
        </div>
      </div>
    </div>
  <% end %>
  <div class="form-group">

    <%= form.text_area :content, autofocus: true, rows: 20, class: 'form-control', placeholder: "Body", id: 'summernote' %>
  </div>

  <div class="row">
    <div class="col-md-6 col-lg-6 col-xl-6 col-sm-12">
      <div class="form-group">
        <%= form.file_field :images, multiple: true, accept: 'image/jpeg, image/png' %>
      </div>
    </div>
    <% if @post.post_type == Post::POST_TYPE_SUBJECT && !@post.persisted? %>
      <div class="col-md-3 col-lg-3 col-xl-3 col-sm-12">
        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <div class="input-group-text private-checkbox">
              <%= form.check_box :private, onchange: 'togglePrivateSection()' %>
            </div>
            <label class="form-check-label pl-2 pt-1">
              Make this subject private?
            </label>
          </div>
        </div>
      </div>

      <div class="col-md-3 col-lg-3 col-xl-3 col-sm-12">
        <div class="input-group mb-3">
          <div class="input-group-prepend">
            <div class="input-group-text private-checkbox">
              <%= form.check_box :curated, onchange: 'toggleCuratedSection()' %>
            </div>
            <label class="form-check-label pl-2 pt-1">
              Make this subject curated?
            </label>
          </div>
        </div>
      </div>
    <% end %>
  </div>
  <% unless [Post::POST_TYPE_HAVE, Post::POST_TYPE_WANT, Post::POST_TYPE_LAYER].include?(@post.post_type) %>
    <%= render 'geo_maxing_form_section', form: form, post: @post %>
  <% end %>

  <% if @post.images.present? %>
    <div class="col-lg-12 col-md-12 ml-auto mr-auto">
      <% @post.images.each do |image| %>
        <div class="col-md-3">
          <%= image_tag(image, :class => "img-responsive", width: "250") %>
        </div>
      <% end %>
    </div>
  <% end %>

  <div class="form-group">
    <%= form.text_field :tag_list, class: 'form-control', placeholder: "Tags (separated by commas)" %>
  </div>
  <% unless [Post::POST_TYPE_HAVE, Post::POST_TYPE_WANT].include?(@post.post_type) %>
    <div class="form-group" id="resource_tags">
      <%= form.text_field :resource_tag_list, class: 'form-control', placeholder: "Resource Tags (separated by commas)" %>
    </div>
  <% end %>

  <div id="private-users-section">
    <% if @post.post_type == Post::POST_TYPE_SUBJECT %>
      <% if !@post.persisted? %>
        <%= render 'private_users_list', private_users: @private_users, post: @post, type: 'private' %>
      <% elsif @post.persisted? && @post.private? %>
        <%= render 'private_users_list', private_users: @private_users, post: @post, type: 'private' %>
      <% else %>
      <% end %>
    <% end %>
  </div>

  <div id="curated-users-section">
    <% if @post.post_type == Post::POST_TYPE_SUBJECT %>
      <% if !@post.persisted? %>
        <%= render 'private_users_list', private_users: @curated_users, post: @post, type: 'curated' %>
      <% elsif @post.persisted? && @post.curated? %>
        <%= render 'private_users_list', private_users: @curated_users, post: @post, type: 'curated' %>
      <% else %>
      <% end %>
    <% end %>
  </div>

  <div class="form-group">

    <%= form.submit class: 'btn btn-primary' %>

    <%= link_to "Cancel", :back, class: "btn btn-link" %>
  </div>
<% end %>

<script>

    if($('#post_private').is(":checked")) {
        $('#private-users-section').show();
        formulateSelectField('.select2', 'private');
    } else {
        $('#private-users-section').hide();
    }

    if($('#post_curated').is(":checked")) {
        $('#curated-users-section').show();
        formulateSelectField('.select2', 'curated');
    } else {
        $('#curated-users-section').hide();
    }

    function togglePrivateSection() {
        if($('#post_private').is(":checked")) {
            $('#private-users-section').show();
            formulateSelectField('.select2', 'private');
        } else {
            $('#private-users-section').hide();
        }
    }

    function toggleCuratedSection() {
        if($('#post_curated').is(":checked")) {
            $('#curated-users-section').show();
            formulateSelectField('.select2', 'curated');
        } else {
            $('#curated-users-section').hide();
        }
    }

  <% if @post.persisted? %>

    <% if @post.post_type == Post::POST_TYPE_IDEA %>
      $('#resource_tags').show();
      initSelect2('#post_subject_id', false, 'Select Subject');
      initSelect2('#post_problem_id', false, 'Select Problem');
    <% end %>

    $('#private-users-section').show();
    $('#curated-users-section').show();
    formulateSelectField('.select2', 'private');
    formulateSelectField('.select2', 'curated');

    var NoteButton = function (context) {
        var ui = $.summernote.ui;

        var button = ui.button({
            contents: '<%= image_tag('note.png', class: 'img-responsive', width: '20') %>',
            tooltip: 'Note Token',
            click: function () {

                dropToken(context, 'note')
            }
        });

        return button.render();
    };

    var DebateButton = function (context) {
        var ui = $.summernote.ui;

        // create button
        var button = ui.button({
            contents: '<%= image_tag('debate.png', class: 'img-responsive', width: '20') %>',
            tooltip: 'Debate Token',
            click: function () {
                dropToken(context, 'debate')
            }
        });

        return button.render();
    };

    var QuestionButton = function (context) {
        var ui = $.summernote.ui;

        var button = ui.button({
            contents: '<%= image_tag('question.png', class: 'img-responsive', width: '20') %>',
            tooltip: 'Question Token',
            click: function () {
                dropToken(context, 'question')
            }
        });

        return button.render();
    };

    function dropToken(e, token_type) {
        var editor = e;
        $.ajax({
            url: '/post_tokens',
            type: "POST",
            dataType: "JSON",
            data: {
                user_id: <%= current_user.id %>,
                post_id: <%= @post.id || 2 %>,
                post_token_type: token_type,
            },
            success: function (data) {

                if (data.post_token_type === 'note') {
                    var noteHTML = '<a href="/post_tokens/' + data.post_token_type + '?id=' + data.id + '"><%= image_tag('note.png', width: "20") %>';
                    editor.invoke('editor.pasteHTML', noteHTML);
                } else if (data.post_token_type === 'debate') {
                    var debateHTML = '<a href="/post_tokens/' + data.post_token_type + '?id=' + data.id + '"><%= image_tag('debate.png', width: "20") %>';
                    editor.invoke('editor.pasteHTML', debateHTML);
                } else {
                    var questionHTML = '<a href="/post_tokens/' + data.post_token_type + '?id=' + data.id + '"><%= image_tag('question.png', width: "20") %>';
                    editor.invoke('editor.pasteHTML', questionHTML);
                }

                $.ajax({
                    url: '/post_tokens/token_modal',
                    type: "get",
                    data: {
                        id: data.id,
                    }
                })
            },
            error: function (data) {
            }
        })
    };

    $('#summernote').summernote({
        height: 150,
        disableDragAndDrop: true,
        toolbar: [
            // [groupName, [list of button]]
            ['style', ['bold', 'italic', 'underline', 'link']],
            ['font', ['strikethrough', 'fontsize']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['tokens', ['note', 'question', 'debate']],
            ['misc', ['undo', 'redo']]
        ],
        popover: {
            image: [
                ['remove', ['removeMedia']]
            ],
            link: []
        },
        buttons: {
            note: NoteButton,
            question: QuestionButton,
            debate: DebateButton,
        }
    });

  <% else %>
    <% if @post.post_type == Post::POST_TYPE_IDEA %>
      $('#resource_tags').show();
      initSelect2('#post_subject_id', false, 'Select Subject');
      initSelect2('#post_problem_id', false, 'Select Problem');
    <% elsif @post.post_type == Post::POST_TYPE_PROBLEM %>
      initSelect2('#post_subject_id', false, 'Select Subject');
      initSelect2('#post_problem_id', true, 'Select Problem');
    <% else %>
      $('#resource_tags').hide();
      initSelect2('#post_subject_id', true, 'Select Subject');
      initSelect2('#post_problem_id', true, 'Select Problem');
    <% end %>
    $('#summernote').summernote({
        height: 150,
        disableDragAndDrop: true,
        toolbar: [
            // [groupName, [list of button]]
            ['style', ['bold', 'italic', 'underline', 'link']],
            ['font', ['strikethrough', 'fontsize']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['misc', ['undo', 'redo']]
        ],
        popover: {
            image: [
                ['remove', ['removeMedia']]
            ],
            link: []
        }
    });
  <% end %>

    $('#post_post_type').change(function(e) {
        if (e.target.value == 'problem') {
            initSelect2('#post_subject_id', false, 'Select Subject');
            initSelect2('#post_problem_id', true, 'Select Problem');
            $('#resource_tags').hide();
        } else if (e.target.value == 'idea') {
            initSelect2('#post_subject_id', false, 'Select Subject');
            initSelect2('#post_problem_id', false, 'Select Problem');
            $('#summernote').summernote('code', '<b><%= PreformattedMessage.where(for_post_type: 'idea')&.last&.body %></b><br><br>');
            $('#resource_tags').show();
        } else {
            initSelect2('#post_subject_id', true, 'Select Subject');
            initSelect2('#post_problem_id', true, 'Select Problem');
            $('#resource_tags').hide();
        }
    });

    function initSelect2(selector, disable, placeholder) {
        $(selector).select2({
            placeholder: placeholder,
            quietMillis: 200,
            multiple: false,
            minimumInputLength: 2,
            disabled: disable
        });
    }

    function formulateSelectField(selector, type) {
        var results = [];
        var exclude_ids;
        if (type == 'private') {
            <% @post.private_users.each do |user| %>
              results.push({
                  id: '<%= user.id %>',
                  text: '<%= user.name %>'
              });
            <% end %>
            exclude_ids = <%= @post.private_users.ids %>
        } else {
            <% @post.curated_users.each do |user| %>
            results.push({
                id: '<%= user.id %>',
                text: '<%= user.name %>'
            });
            <% end %>
            exclude_ids = <%= @post.curated_users.ids %>
        }
        agent = $(selector).select2({
            placeholder: 'Search',
            quietMillis: 200,
            multiple: true,
            minimumInputLength: 2,
            data: results,
            ajax: {
                delay: 250,
                dataType: "JSON",
                url: "<%= get_users_path %>",
                data: function (params) {
                    var query = {
                        term: params.term,
                        excluded_ids: exclude_ids
                    };

                    // Query parameters will be ?search=[term]&type=public
                    return query;
                },
                processResults: function (data) {
                    return {
                        results: data
                    };
                },
            },
            templateResult: formatRepo,
            templateSelection: formatRepoSelection

        });

        if (type == 'private') {
            agent.val(<%= @post.private_users.collect(&:name).to_json.html_safe %>);
        } else {
            agent.val(<%= @post.curated_users.collect(&:name).to_json.html_safe %>);
        }

        agent.trigger('change');
    }

  function formatRepo (user) {
      if (user.loading) return user.text;
      console.log('user', user);

      var $span = $("<span><img src=" + user.profile_picture + " style=\"width: 20px; height: 20px\" /> "+ user.text + "</span>");
      return $span;
  }

  function formatRepoSelection (user) {
      return user.text;
  }

</script>
